#+title: Emacs Configuration (Elpaca)
#+author: cross-sniper

This is my Emacs configuration, written in org-mode for better documentation.
It uses **Elpaca** as the package manager.

* UI Cleanup
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
#+end_src

* Elpaca Bootstrap
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

* Package Setup
#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
;; Enable Elpaca + use-package integration
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

;; Theme
(use-package monokai-theme
  :ensure t
  :config
  (load-theme 'monokai t))

;; Evil (Vim bindings)
(use-package evil-collection
  :ensure t
  :after evil
  :init
  (evil-collection-init)
)
(use-package evil
  :ensure t
  :config
  (evil-mode 1))

;; Doom modeline
(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1))

;; Perspective.el
(use-package perspective
  :ensure t
  :bind
  ("C-x C-b" . persp-list-buffers)         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
  :init
  (persp-mode 1))
(electric-pair-mode 1)

;; Git
(use-package transient
  :ensure t
)

(use-package magit
  :ensure t)

;; LSP core + UI
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook ((c-mode c++-mode lua-mode typescript-mode) . lsp)
  :init
  (setq lsp-enable-on-type-formatting nil
        lsp-enable-indentation nil
        lsp-completion-provider :capf
        lsp-prefer-flymake nil)
  :config
  (add-to-list 'lsp-language-id-configuration '(c++-mode . "cpp"))
  (add-to-list 'lsp-language-id-configuration '(c-mode . "c")))

(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-enable t
        lsp-enable-symbol-highlighting t))

;; Company (autocomplete)
(use-package company
  :ensure t
  :hook (prog-mode . company-mode))

;; Which-key (helpful key popup)
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

;; Vertico (completion interface)
(use-package vertico
  :ensure t
  :config
  (vertico-mode 1))

;; Language modes
(use-package lua-mode
  :ensure t)

(use-package typescript-mode
  :ensure t)
#+end_src

* Misc Settings
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)

;; Better buffer management
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; Font and tab settings
(set-frame-font "JetBrainsMono Nerd Font-18" nil t)
(setq-default tab-width 4)

;; Disable backup/lock/autosave
(setq make-backup-files nil
      auto-save-default nil
      create-lockfiles nil)
#+end_src

* Load Additional Modes
#+begin_src emacs-lisp
(defun load-directory-modes (dir)
  "Load all Emacs Lisp files from DIR."
  (let ((load-it (lambda (f)
                   (load-file (concat (file-name-as-directory dir) f)))))
    (mapc load-it (directory-files dir nil "\\.el$"))))

(load-directory-modes (expand-file-name "~/.config/emacs/modes/"))
#+end_src
